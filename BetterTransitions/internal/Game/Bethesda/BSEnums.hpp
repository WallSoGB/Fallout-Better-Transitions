#pragma once

#pragma region AI

enum PROCESS_TYPE {
	PROCESS_TYPE_INVALID		= -1,
	PROCESS_TYPE_HIGH			= 0,
	PROCESS_TYPE_MIDDLE_HIGH	= 1,
	PROCESS_TYPE_MIDDLE_LOW		= 2,
	PROCESS_TYPE_LOW			= 3,
	PROCESS_TYPE_COUNT			= 4
};

#pragma endregion

#pragma region Packages

enum PACK_LOC_TYPE {
	PLT_NONE				= -1,
	PLT_REFERENCE			= 0,
	PLT_CELL				= 1,
	PLT_CURRENT_LOCATION	= 2,
	PLT_EDITOR_LOCATION		= 3,
	PLT_OBJECT				= 4,
	PLT_TYPE				= 5,
	PLT_LINKED_REFERENCE	= 6,
	PLT_COUNT,
};

enum PACK_TARG_TYPE {
	PTT_NONE			= -1,
	PTT_REFERENCE		= 0,
	PTT_OBJECT			= 1,
	PTT_TYPE			= 2,
	PTT_LINKEDREF		= 3,
};

enum PACKAGE_OBJECT_TYPE {
	OT_NONE = 0,
	OT_ACTIVATOR,
	OT_ARMOR,
	OT_BOOK,
	OT_CLOTHING_OLD,
	OT_CONTAINER,
	OT_DOOR,
	OT_INGREDIENT,
	OT_LIGHT,
	OT_MISC,
	OT_FLORA,
	OT_FURNITURE,
	OT_WEAPON,
	OT_AMMO,
	OT_NPC,
	OT_CREATURE,
	OT_KEY,
	OT_ALCHEMY,
	OT_FOOD,
	OT_CLOTHING,
	OT_WEAR,
	OT_WEAPON_RANGED,
	OT_WEAPON_MELEE,
	OT_WEAPON_NONE,
	OT_SPELL,
	OT_SPELL_RANGED,
	OT_SPELL_TOUCH,
	OT_SPELL_SELF,
	OT_ACTOR,
	OT_COUNT,
};

enum PACKAGE_TYPE {
	PACKAGE_TYPE_NONE						= -1,
	PACKAGE_TYPE_EXPLORE					= 0,
	PACKAGE_TYPE_FOLLOW						= 1,
	PACKAGE_TYPE_ESCORT						= 2,
	PACKAGE_TYPE_EAT						= 3,
	PACKAGE_TYPE_SLEEP						= 4,
	PACKAGE_TYPE_WANDER						= 5,
	PACKAGE_TYPE_TRAVEL						= 6,
	PACKAGE_TYPE_ACCOMPANY					= 7,
	PACKAGE_TYPE_USE_ITEM_AT				= 8,
	PACKAGE_TYPE_AMBUSH						= 9,
	PACKAGE_TYPE_FLEE_NON_COMBAT			= 10,
	PACKAGE_TYPE_CAST_MAGIC					= 11,
	PACKAGE_TYPE_SANDBOX					= 12,
	PACKAGE_TYPE_PATROL						= 13,
	PACKAGE_TYPE_GUARD						= 14,
	PACKAGE_TYPE_DIALOGUE					= 15,
	PACKAGE_TYPE_USE_WEAPON					= 16,
	PACKAGE_TYPE_FIND						= 17,
	PACKAGE_TYPE_COMBAT						= 18,
	PACKAGE_TYPE_COMBAT_LOW					= 19,
	PACKAGE_TYPE_ACTIVATE					= 20,
	PACKAGE_TYPE_ALARM						= 21,
	PACKAGE_TYPE_FLEE						= 22,
	PACKAGE_TYPE_TRESPASS					= 23,
	PACKAGE_TYPE_SPECTATOR					= 24,
	PACKAGE_TYPE_GREET						= 25,
	PACKAGE_TYPE_GET_UP						= 26,
	PACKAGE_TYPE_DO_NOTHING					= 27,
	PACKAGE_TYPE_IN_GAME_DIALOGUE			= 28,
	PACKAGE_TYPE_SURFACE					= 29,
	PACKAGE_TYPE_SEARCH_FOR_ATTACKER		= 30,
	PACKAGE_TYPE_MOVEMENT_BLOCKED			= 31,
	PACKAGE_TYPE_AVOID_RADIATION			= 32,
	PACKAGE_TYPE_REACT_TO_DESTROYED_OBJECT	= 33,
	PACKAGE_TYPE_REACT_TO_GRENADE_OR_MINE	= 34,
	PACKAGE_TYPE_STEAL_WARNING				= 35,
	PACKAGE_TYPE_PICKPOCKET_WARNING			= 36,
	PACKAGE_TYPE_UNK37						= 37,
	PACKAGE_TYPE_SANDMAN					= 38,
	PACKAGE_TYPE_CANNIBAL					= 39,
	PACKAGE_TYPE_BACKUP						= 40,
	PACKAGE_TYPE_COUNT,
};

enum PACKAGE_PROCEDURE_TYPE {
	PACKAGE_PROCEDURE_NONE						= -1,
	PACKAGE_PROCEDURE_EXPLORE_TRAVEL			= 0,
	PACKAGE_PROCEDURE_EXPLORE_WANDER			= 1,
	PACKAGE_PROCEDURE_EXPLORE_ACTIVATE			= 2,
	PACKAGE_PROCEDURE_EXPLORE_ACQUIRE			= 3,
	PACKAGE_PROCEDURE_SLEEP						= 4,
	PACKAGE_PROCEDURE_EAT						= 5,
	PACKAGE_PROCEDURE_FOLLOW_WITH_ESCORT		= 6,
	PACKAGE_PROCEDURE_AMBUSH_FOLLOW				= 7,
	PACKAGE_PROCEDURE_ESCORT_ACTOR				= 8,
	PACKAGE_PROCEDURE_ESCORT_OBJECT				= 9,
	PACKAGE_PROCEDURE_DIALOGUE					= 10,
	PACKAGE_PROCEDURE_ALARM						= 11,
	PACKAGE_PROCEDURE_COMBAT					= 12,
	PACKAGE_PROCEDURE_ACTIVATE					= 13,
	PACKAGE_PROCEDURE_GREET						= 14,
	PACKAGE_PROCEDURE_OBSERVE_COMBAT			= 15,
	PACKAGE_PROCEDURE_OBSERVE_DIALOGUE			= 16,
	PACKAGE_PROCEDURE_GREET_DEAD				= 17,
	PACKAGE_PROCEDURE_PURSUE_COMBAT				= 18,
	PACKAGE_PROCEDURE_FLEE						= 19,
	PACKAGE_PROCEDURE_TRESPASS					= 20,
	PACKAGE_PROCEDURE_GET_UP					= 21,
	PACKAGE_PROCEDURE_EXPLORE_NPC				= 22,
	PACKAGE_PROCEDURE_MOUNT						= 23,
	PACKAGE_PROCEDURE_DISMOUNT					= 24,
	PACKAGE_PROCEDURE_DO_NOTHING				= 25,
	PACKAGE_PROCEDURE_EXPLORE_ACQUIRE_GENERIC	= 26,
	PACKAGE_PROCEDURE_ACCOMPANY					= 27,
	PACKAGE_PROCEDURE_USEITEMAT					= 28,
	PACKAGE_PROCEDURE_VAMPIRE_FEED				= 29,
	PACKAGE_PROCEDURE_AMBUSH					= 30,
	PACKAGE_PROCEDURE_SURFACE					= 31,
	PACKAGE_PROCEDURE_FLEE_NON_COMBAT			= 32,
	PACKAGE_PROCEDURE_SEARCH					= 33,
	PACKAGE_PROCEDURE_CLEAR_MOUNT_POSITION		= 34,
	PACKAGE_PROCEDURE_SUMMON_CREATURE_DEFEND	= 35,
	PACKAGE_PROCEDURE_AVOID_RADIATION			= 36,
	PACKAGE_PROCEDURE_SANDBOX					= 37,
	PACKAGE_PROCEDURE_PATROL					= 38,
	PACKAGE_PROCEDURE_BUMP_REACTION				= 39,
	PACKAGE_PROCEDURE_GRENADE_MINE_REACTION		= 40,
	PACKAGE_PROCEDURE_GUARD						= 41,
	PACKAGE_PROCEDURE_STEAL_WARN				= 42,
	PACKAGE_PROCEDURE_PICKPOCKET_WARN			= 43,
	PACKAGE_PROCEDURE_USEWEAPON					= 44,
	PACKAGE_PROCEDURE_FOLLOW_WITHOUT_ESCORT		= 45,
	PACKAGE_PROCEDURE_MOVEMENT_BLOCKED			= 46,
	PACKAGE_PROCEDURE_CANNIBAL					= 47,
	PACKAGE_PROCEDURE_BACKUP					= 48,
	PACKAGE_PROCEDURE_COUNT,
};

enum PROCEDURE {
	PROCEDURE_NONE						= -1,
	PROCEDURE_TRAVEL					= 0,
	PROCEDURE_WANDER					= 1,
	PROCEDURE_ACTIVATE					= 2,
	PROCEDURE_ACQUIRE					= 3,
	PROCEDURE_SLEEP						= 4,
	PROCEDURE_EAT						= 5,
	PROCEDURE_FOLLOW					= 6,
	PROCEDURE_ESCORT					= 7,
	PROCEDURE_ALARM						= 8,
	PROCEDURE_COMBAT					= 9,
	PROCEDURE_FLEE						= 10,
	PROCEDURE_YIELD						= 11,
	PROCEDURE_DIALOGUE					= 12,
	PROCEDURE_WAIT						= 13,
	PROCEDURE_TRAVEL_TARGET				= 14,
	PROCEDURE_PURSUE					= 15,
	PROCEDURE_GREET						= 16,
	PROCEDURE_CREATE_FOLLOW				= 17,
	PROCEDURE_OBSERVE_COMBAT			= 18,
	PROCEDURE_OBSERVE_DIALOGUE			= 19,
	PROCEDURE_GREET_DEAD				= 20,
	PROCEDURE_WARN						= 21,
	PROCEDURE_GET_UP					= 22,
	PROCEDURE_MOUNT_HORSE				= 23,
	PROCEDURE_DISMOUNT_HORSE			= 24,
	PROCEDURE_DO_NOTHING				= 25,
	PROCEDURE_NOTIFY					= 26,
	PROCEDURE_ACCOMPANY					= 27,
	PROCEDURE_USE_ITEM_AT				= 28,
	PROCEDURE_FEED						= 29,
	PROCEDURE_AMBUSH_WAIT				= 30,
	PROCEDURE_SURFACE					= 31,
	PROCEDURE_WAIT_FOR_SPELL			= 32,
	PROCEDURE_CHOOSE_CAST				= 33,
	PROCEDURE_FLEE_NON_COMBAT			= 34,
	PROCEDURE_REMOVE_WORN_ITEMS			= 35,
	PROCEDURE_SEARCH					= 36,
	PROCEDURE_CLEAR_MOUNT_POSITION		= 37,
	PROCEDURE_SUMMON_CREATURE_DEFEND	= 38,
	PROCEDURE_AVOID_RADIATION			= 39,
	PROCEDURE_UNEQUIP_ARMOR				= 40,
	PROCEDURE_TAKE_BACK_ITEM			= 41,
	PROCEDURE_SANDBOX					= 42,
	PROCEDURE_USE_IDLE_MARKER			= 43,
	PROCEDURE_PATROL					= 44,
	PROCEDURE_EXPLOSION_REACTION		= 45,
	PROCEDURE_GRENADE_MINE_PICKUP_THROW	= 46,
	PROCEDURE_GUARD						= 47,
	PROCEDURE_ALERT_SEARCH				= 48,
	PROCEDURE_DIALOGUE_ACTIVATE			= 49,
	PROCEDURE_USE_WEAPON				= 50,
	PROCEDURE_MOVEMENT_BLOCKED			= 51,
	PROCEDURE_CANNIBAL_FEED				= 52,
	PROCEDURE_BACK_UP					= 53,
	PROCEDURE_DONE						= 54,
	PROCEDURE_COUNT						= 54
};

#pragma endregion

#pragma region Animations

enum ANIMATION_ACTION {
	ANIM_ACTION_NONE = -1,
	ANIM_ACTION_EQUIP_WEAPON,
	ANIM_ACTION_UNEQUIP_WEAPON,
	ANIM_ACTION_ATTACK,
	ANIM_ACTION_ATTACK_FOLLOW_THROUGH,
	ANIM_ACTION_ATTACK_LATENCY,
	ANIM_ACTION_ATTACK_THROW_ATTACH,
	ANIM_ACTION_ATTACK_THROW_RELEASE,
	ANIM_ACTION_BLOCK,
	ANIM_ACTION_STAGGER,
	ANIM_ACTION_RELOAD,
	ANIM_ACTION_DODGE,
	ANIM_ACTION_WAIT_FOR_LOWER_BODY_ANIM,
	ANIM_ACTION_WAIT_FOR_SPECIAL_IDLE,
	ANIM_ACTION_FORCE_SCRIPACKAGE_TYPE_ANIM
};

enum ANIM_GROUP_MOVE_ENUM : uint16_t {
	ANIM_GROUP_MOVE_NONE	= 0,
	ANIM_GROUP_MOVE_SNEAK	= 1,
	ANIM_GROUP_MOVE_SWIM	= 2,
	ANIM_GROUP_MOVE_FLY		= 3,
};

enum ANIM_GROUP_WEAPON_ENUM : uint16_t {
	ANIM_GROUP_WEAPON_H2H,
	ANIM_GROUP_WEAPON_1HM,
	ANIM_GROUP_WEAPON_2HM,
	ANIM_GROUP_WEAPON_1HP,
	ANIM_GROUP_WEAPON_2HA,
	ANIM_GROUP_WEAPON_2HH,
	ANIM_GROUP_WEAPON_2HL,
	ANIM_GROUP_WEAPON_1GT,
	ANIM_GROUP_WEAPON_1MD,
	ANIM_GROUP_WEAPON_1LM,
};

enum ANIM_GROUP_ENUM : int16_t {
	ANIM_GROUP_NONE = -1,
	ANIM_GROUP_IDLE = 0,
	ANIM_GROUP_DYNAMIC_IDLE,
	ANIM_GROUP_SPECIAL_IDLE,
	ANIM_GROUP_MOVE_FORWARD,
	ANIM_GROUP_MOVE_BACK,
	ANIM_GROUP_MOVE_LEFT,
	ANIM_GROUP_MOVE_RIGHT,
	ANIM_GROUP_FAST_FORWARD,
	ANIM_GROUP_FAST_BACK,
	ANIM_GROUP_FAST_LEFT,
	ANIM_GROUP_FAST_RIGHT,
	ANIM_GROUP_DODGE_FORWARD,
	ANIM_GROUP_DODGE_BACK,
	ANIM_GROUP_DODGE_LEFT,
	ANIM_GROUP_DODGE_RIGHT,
	ANIM_GROUP_TURN_LEFT,
	ANIM_GROUP_TURN_RIGHT,
	ANIM_GROUP_AIM,
	ANIM_GROUP_AIM_UP,
	ANIM_GROUP_AIM_DOWN,
	ANIM_GROUP_AIM_IS,
	ANIM_GROUP_AIM_IS_UP,
	ANIM_GROUP_AIM_IS_DOWN,
	ANIM_GROUP_HOLSTER,
	ANIM_GROUP_EQUIP,
	ANIM_GROUP_UNEQUIP,
	ANIM_GROUP_ATTACK_LEFT,
	ANIM_GROUP_ATTACK_LEFT_UP,
	ANIM_GROUP_ATTACK_LEFT_DOWN,
	ANIM_GROUP_ATTACK_LEFT_IS,
	ANIM_GROUP_ATTACK_LEFT_IS_UP,
	ANIM_GROUP_ATTACK_LEFT_IS_DOWN,
	ANIM_GROUP_ATTACK_RIGHT,
	ANIM_GROUP_ATTACK_RIGHT_UP,
	ANIM_GROUP_ATTACK_RIGHT_DOWN,
	ANIM_GROUP_ATTACK_RIGHT_IS,
	ANIM_GROUP_ATTACK_RIGHT_IS_UP,
	ANIM_GROUP_ATTACK_RIGHT_IS_DOWN,
	ANIM_GROUP_ATTACK_3,
	ANIM_GROUP_ATTACK_3_UP,
	ANIM_GROUP_ATTACK_3_DOWN,
	ANIM_GROUP_ATTACK_3_IS,
	ANIM_GROUP_ATTACK_3_IS_UP,
	ANIM_GROUP_ATTACK_3_IS_DOWN,
	ANIM_GROUP_ATTACK_4,
	ANIM_GROUP_ATTACK_4_UP,
	ANIM_GROUP_ATTACK_4_DOWN,
	ANIM_GROUP_ATTACK_4_IS,
	ANIM_GROUP_ATTACK_4_IS_UP,
	ANIM_GROUP_ATTACK_4_IS_DOWN,
	ANIM_GROUP_ATTACK_5,
	ANIM_GROUP_ATTACK_5_UP,
	ANIM_GROUP_ATTACK_5_DOWN,
	ANIM_GROUP_ATTACK_5_IS,
	ANIM_GROUP_ATTACK_5_IS_UP,
	ANIM_GROUP_ATTACK_5_IS_DOWN,
	ANIM_GROUP_ATTACK_6,
	ANIM_GROUP_ATTACK_6_UP,
	ANIM_GROUP_ATTACK_6_DOWN,
	ANIM_GROUP_ATTACK_6_IS,
	ANIM_GROUP_ATTACK_6_IS_UP,
	ANIM_GROUP_ATTACK_6_IS_DOWN,
	ANIM_GROUP_ATTACK_7,
	ANIM_GROUP_ATTACK_7_UP,
	ANIM_GROUP_ATTACK_7_DOWN,
	ANIM_GROUP_ATTACK_7_IS,
	ANIM_GROUP_ATTACK_7_IS_UP,
	ANIM_GROUP_ATTACK_7_IS_DOWN,
	ANIM_GROUP_ATTACK_8,
	ANIM_GROUP_ATTACK_8_UP,
	ANIM_GROUP_ATTACK_8_DOWN,
	ANIM_GROUP_ATTACK_8_IS,
	ANIM_GROUP_ATTACK_8_IS_UP,
	ANIM_GROUP_ATTACK_8_IS_DOWN,
	ANIM_GROUP_ATTACK_LOOP,
	ANIM_GROUP_ATTACK_LOOP_UP,
	ANIM_GROUP_ATTACK_LOOP_DOWN,
	ANIM_GROUP_ATTACK_LOOP_IS,
	ANIM_GROUP_ATTACK_LOOP_IS_UP,
	ANIM_GROUP_ATTACK_LOOP_IS_DOWN,
	ANIM_GROUP_ATTACK_SPIN,
	ANIM_GROUP_ATTACK_SPIN_UP,
	ANIM_GROUP_ATTACK_SPIN_DOWN,
	ANIM_GROUP_ATTACK_SPIN_IS,
	ANIM_GROUP_ATTACK_SPIN_IS_UP,
	ANIM_GROUP_ATTACK_SPIN_IS_DOWN,
	ANIM_GROUP_ATTACK_SPIN_2,
	ANIM_GROUP_ATTACK_SPIN_2_UP,
	ANIM_GROUP_ATTACK_SPIN_2_DOWN,
	ANIM_GROUP_ATTACK_SPIN_2_IS,
	ANIM_GROUP_ATTACK_SPIN_2_IS_UP,
	ANIM_GROUP_ATTACK_SPIN_2_IS_DOWN,
	ANIM_GROUP_ATTACK_POWER,
	ANIM_GROUP_ATTACK_FORWARD_POWER,
	ANIM_GROUP_ATTACK_BACK_POWER,
	ANIM_GROUP_ATTACK_LEFT_POWER,
	ANIM_GROUP_ATTACK_RIGHT_POWER,
	ANIM_GROUP_ATTACK_CUSTOM_1_POWER,
	ANIM_GROUP_ATTACK_CUSTOM_2_POWER,
	ANIM_GROUP_ATTACK_CUSTOM_3_POWER,
	ANIM_GROUP_ATTACK_CUSTOM_4_POWER,
	ANIM_GROUP_ATTACK_CUSTOM_5_POWER,
	ANIM_GROUP_PLACE_MINE,
	ANIM_GROUP_PLACE_MINE_UP,
	ANIM_GROUP_PLACE_MINE_DOWN,
	ANIM_GROUP_PLACE_MINE_IS,
	ANIM_GROUP_PLACE_MINE_IS_UP,
	ANIM_GROUP_PLACE_MINE_IS_DOWN,
	ANIM_GROUP_PLACE_MINE_2,
	ANIM_GROUP_PLACE_MINE_2_UP,
	ANIM_GROUP_PLACE_MINE_2_DOWN,
	ANIM_GROUP_PLACE_MINE_2_IS,
	ANIM_GROUP_PLACE_MINE_2_IS_UP,
	ANIM_GROUP_PLACE_MINE_2_IS_DOWN,
	ANIM_GROUP_ATTACK_THROW,
	ANIM_GROUP_ATTACK_THROW_UP,
	ANIM_GROUP_ATTACK_THROW_DOWN,
	ANIM_GROUP_ATTACK_THROW_IS,
	ANIM_GROUP_ATTACK_THROW_IS_UP,
	ANIM_GROUP_ATTACK_THROW_IS_DOWN,
	ANIM_GROUP_ATTACK_THROW_2,
	ANIM_GROUP_ATTACK_THROW_2_UP,
	ANIM_GROUP_ATTACK_THROW_2_DOWN,
	ANIM_GROUP_ATTACK_THROW_2_IS,
	ANIM_GROUP_ATTACK_THROW_2_IS_UP,
	ANIM_GROUP_ATTACK_THROW_2_IS_DOWN,
	ANIM_GROUP_ATTACK_THROW_3,
	ANIM_GROUP_ATTACK_THROW_3_UP,
	ANIM_GROUP_ATTACK_THROW_3_DOWN,
	ANIM_GROUP_ATTACK_THROW_3_IS,
	ANIM_GROUP_ATTACK_THROW_3_IS_UP,
	ANIM_GROUP_ATTACK_THROW_3_IS_DOWN,
	ANIM_GROUP_ATTACK_THROW_4,
	ANIM_GROUP_ATTACK_THROW_4_UP,
	ANIM_GROUP_ATTACK_THROW_4_DOWN,
	ANIM_GROUP_ATTACK_THROW_4_IS,
	ANIM_GROUP_ATTACK_THROW_4_IS_UP,
	ANIM_GROUP_ATTACK_THROW_4_IS_DOWN,
	ANIM_GROUP_ATTACK_THROW_5,
	ANIM_GROUP_ATTACK_THROW_5_UP,
	ANIM_GROUP_ATTACK_THROW_5_DOWN,
	ANIM_GROUP_ATTACK_THROW_5_IS,
	ANIM_GROUP_ATTACK_THROW_5_IS_UP,
	ANIM_GROUP_ATTACK_THROW_5_IS_DOWN,
	ANIM_GROUP_ATTACK_9,
	ANIM_GROUP_ATTACK_9_UP,
	ANIM_GROUP_ATTACK_9_DOWN,
	ANIM_GROUP_ATTACK_9_IS,
	ANIM_GROUP_ATTACK_9_IS_UP,
	ANIM_GROUP_ATTACK_9_IS_DOWN,
	ANIM_GROUP_ATTACK_THROW_6,
	ANIM_GROUP_ATTACK_THROW_6_UP,
	ANIM_GROUP_ATTACK_THROW_6_DOWN,
	ANIM_GROUP_ATTACK_THROW_6_IS,
	ANIM_GROUP_ATTACK_THROW_6_IS_UP,
	ANIM_GROUP_ATTACK_THROW_6_IS_DOWN,
	ANIM_GROUP_ATTACK_THROW_7,
	ANIM_GROUP_ATTACK_THROW_7_UP,
	ANIM_GROUP_ATTACK_THROW_7_DOWN,
	ANIM_GROUP_ATTACK_THROW_7_IS,
	ANIM_GROUP_ATTACK_THROW_7_IS_UP,
	ANIM_GROUP_ATTACK_THROW_7_IS_DOWN,
	ANIM_GROUP_ATTACK_THROW_8,
	ANIM_GROUP_ATTACK_THROW_8_UP,
	ANIM_GROUP_ATTACK_THROW_8_DOWN,
	ANIM_GROUP_ATTACK_THROW_8_IS,
	ANIM_GROUP_ATTACK_THROW_8_IS_UP,
	ANIM_GROUP_ATTACK_THROW_8_IS_DOWN,
	ANIM_GROUP_COUNTER,
	ANIM_GROUP_STOMP,
	ANIM_GROUP_BLOCK_IDLE,
	ANIM_GROUP_BLOCK_HIT,
	ANIM_GROUP_RECOIL,
	ANIM_GROUP_RELOAD_W_START,
	ANIM_GROUP_RELOAD_X_START,
	ANIM_GROUP_RELOAD_Y_START,
	ANIM_GROUP_RELOAD_Z_START,
	ANIM_GROUP_RELOAD_A,
	ANIM_GROUP_RELOAD_B,
	ANIM_GROUP_RELOAD_C,
	ANIM_GROUP_RELOAD_D,
	ANIM_GROUP_RELOAD_E,
	ANIM_GROUP_RELOAD_F,
	ANIM_GROUP_RELOAD_G,
	ANIM_GROUP_RELOAD_H,
	ANIM_GROUP_RELOAD_I,
	ANIM_GROUP_RELOAD_J,
	ANIM_GROUP_RELOAD_K,
	ANIM_GROUP_RELOAD_L,
	ANIM_GROUP_RELOAD_M,
	ANIM_GROUP_RELOAD_N,
	ANIM_GROUP_RELOAD_O,
	ANIM_GROUP_RELOAD_P,
	ANIM_GROUP_RELOAD_Q,
	ANIM_GROUP_RELOAD_R,
	ANIM_GROUP_RELOAD_S,
	ANIM_GROUP_RELOAD_W,
	ANIM_GROUP_RELOAD_X,
	ANIM_GROUP_RELOAD_Y,
	ANIM_GROUP_RELOAD_Z,
	ANIM_GROUP_JAM_A,
	ANIM_GROUP_JAM_B,
	ANIM_GROUP_JAM_C,
	ANIM_GROUP_JAM_D,
	ANIM_GROUP_JAM_E,
	ANIM_GROUP_JAM_F,
	ANIM_GROUP_JAM_G,
	ANIM_GROUP_JAM_H,
	ANIM_GROUP_JAM_I,
	ANIM_GROUP_JAM_J,
	ANIM_GROUP_JAM_K,
	ANIM_GROUP_JAM_L,
	ANIM_GROUP_JAM_M,
	ANIM_GROUP_JAM_N,
	ANIM_GROUP_JAM_O,
	ANIM_GROUP_JAM_P,
	ANIM_GROUP_JAM_Q,
	ANIM_GROUP_JAM_R,
	ANIM_GROUP_JAM_S,
	ANIM_GROUP_JAM_W,
	ANIM_GROUP_JAM_X,
	ANIM_GROUP_JAM_Y,
	ANIM_GROUP_JAM_Z,
	ANIM_GROUP_STAGGER,
	ANIM_GROUP_DEATH,
	ANIM_GROUP_TALKING,
	ANIM_GROUP_PIPBOY,
	ANIM_GROUP_JUMP_START,
	ANIM_GROUP_JUMP_LOOP,
	ANIM_GROUP_JUMP_LAND,
	ANIM_GROUP_HAND_GRIP_1,
	ANIM_GROUP_HAND_GRIP_2,
	ANIM_GROUP_HAND_GRIP_3,
	ANIM_GROUP_HAND_GRIP_4,
	ANIM_GROUP_HAND_GRIP_5,
	ANIM_GROUP_HAND_GRIP_6,
	ANIM_GROUP_JUMP_LOOP_FORWARD,
	ANIM_GROUP_JUMP_LOOP_BACKWARD,
	ANIM_GROUP_JUMP_LOOP_LEFT,
	ANIM_GROUP_JUMP_LOOP_RIGHT,
	ANIM_GROUP_PIPBOY_CHILD,
	ANIM_GROUP_JUMP_LAND_FORWARD,
	ANIM_GROUP_JUMP_LAND_BACKWARD,
	ANIM_GROUP_JUMP_LAND_LEFT,
	ANIM_GROUP_JUMP_LAND_RIGHT,

	ANIM_GROUP_COUNT,
};

// TODO: From Oblivion, check
enum ANIM_GROUP_ACTION {
	AGA_NONE				= -1,

	AGA_START				= 0,
	AGA_STOP				= 1,

	AGA_LOOP_START			= 0,
	AGA_LOOP_STOP			= 1,

	AGA_ATTACK_START		= 0,
	AGA_ATTACK_HIT			= 1,
	AGA_ATTACK_SWITCH		= 2,
	AGA_ATTACK_POWER_STOP	= 2,
	AGA_ATTACK_STOP			= 3,

	AGA_BOW_START			= 0,
	AGA_BOW_ATTACH			= 1,
	AGA_BOW_HOLD			= 2,
	AGA_BOW_RELEASE			= 3,
	AGA_BOW_STOP			= 4,
	ANIM_GROUP_ACTION_COUNT = 5,

	AGA_BLOCK_START		= 0,
	AGA_BLOCK_ATTACK	= 1,
	AGA_BLOCK_STOP		= 2,

	AGA_EQUIP_START		= 0,
	AGA_EQUIP_ATTACH	= 1,
	AGA_EQUIP_STOP		= 2,

	AGA_UNEQUIP_START	= 0,
	AGA_UNEQUIP_DETACH	= 1,
	AGA_UNEQUIP_STOP	= 2,

	AGA_CAST_START		= 0,
	AGA_CAST_HIT		= 1,
	AGA_CAST_STOP		= 2
};

// TODO: From Oblivion, check
enum ANIM_GROUP_ACTION_TYPE {
	AGAT_START_STOP					= 0,
	AGAT_LOOP						= 1,
	AGAT_EQUIP						= 2,
	AGAT_UNEQUIP					= 3,
	AGAT_ATTACK						= 4,
	AGAT_ATTACK_POWER				= 5,
	AGAT_BLOCK_ATTACK				= 6,
	AGAT_ATTACK_BOW					= 7,
	ANIM_GROUP_ACTION_TYPE_COUNT	= 8
};

enum ANIM_GROUP_SECTION {
	AGS_NONE						= -1,
	AGS_IDLE						= 0,
	AGS_MOVEMENT					= 1,
	AGS_LEFT_ARM					= 2,
	AGS_LEFT_HAND					= 3,
	AGS_WEAPON						= 4,
	AGS_WEAPON_UP					= 5,
	AGS_WEAPON_DOWN					= 6,
	AGS_SPECIAL_IDLE				= 7,
	ANIM_GROUP_SECTION_COUNT		= 8,
	AGS_DEATH						= 20,
	AGS_UNK21						= 21,
	ANIM_GROUP_SECTION_TOTAL_COUNT
};

enum CONFIDENCE : uint8_t {
	CONFIDENCE_COWARDLY		= 0,
	CONFIDENCE_CAUTIOUS		= 1,
	CONFIDENCE_AVERAGE		= 2,
	CONFIDENCE_BRAVE		= 3,
	CONFIDENCE_FOOLHARDY	= 4,
	CONFIDENCE_COUNT,
};

#pragma endregion

#pragma region Weapons

enum WEAPON_TYPE {
	WEAPON_TYPE_HAND_TO_HAND_MELEE		= 0,
	WEAPON_TYPE_ONE_HAND_MELEE			= 1,
	WEAPON_TYPE_TWO_HAND_MELEE			= 2,
	WEAPON_TYPE_ONE_HAND_PISTOL			= 3,
	WEAPON_TYPE_ONE_HAND_PISTOL_ENERGY	= 4,
	WEAPON_TYPE_TWO_HAND_RIFLE			= 5,
	WEAPON_TYPE_TWO_HAND_AUTOMATIC		= 6,
	WEAPON_TYPE_TWO_HAND_RIFLE_ENERGY	= 7,
	WEAPON_TYPE_TWO_HAND_HANDLE			= 8,
	WEAPON_TYPE_TWO_HAND_LAUNCHER		= 9,
	WEAPON_TYPE_ONE_HAND_GRENADE		= 10,
	WEAPON_TYPE_ONE_HAND_MINE			= 11,
	WEAPON_TYPE_ONE_HAND_LUNCHBOX_MINE	= 12,
	WEAPON_TYPE_ONE_HAND_THROWN			= 13,
	WEAPON_TYPE_COUNT,
};

enum COMBAT_WEAPON_TYPE {
	COMBAT_WEAPON_TYPE_RANGED_EXPLOSIVE = 0,
	COMBAT_WEAPON_TYPE_RANGED			= 1,
	COMBAT_WEAPON_TYPE_MELEE			= 2,
	COMBAT_WEAPON_TYPE_GRENADE			= 3,
	COMBAT_WEAPON_TYPE_MINE				= 4,
	COMBAT_WEAPON_TYPE_THROWN			= 5,
	COMBAT_WEAPON_TYPE_NONE				= 6,
	COMBAT_WEAPON_TYPE_INVALID			= 7,
	COMBAT_WEAPON_TYPE_COUNT = COMBAT_WEAPON_TYPE_NONE,
};

enum WEAPON_SOUND {
	WEAPON_SOUND_SHOOT_3D = 0,
	WEAPON_SOUND_SHOOT_2D,
	WEAPON_SOUND_SHOOT_3D_LOOPING,
	WEAPON_SOUND_NO_AMMO,
	WEAPON_SOUND_SWING = WEAPON_SOUND_NO_AMMO,
	WEAPON_SOUND_BLOCK,
	WEAPON_SOUND_IDLE,
	WEAPON_SOUND_EQUIP,
	WEAPON_SOUND_UNEQUIP
};

enum HAND_GRIP {
	HAND_GRIP_DEFAULT	= 0xFF,
	HAND_GRIP_1			= 0xE6,
	HAND_GRIP_2			= 0xE7,
	HAND_GRIP_3			= 0xE8,
	HAND_GRIP_4			= 0xE9,
	HAND_GRIP_5			= 0xEA,
	HAND_GRIP_6			= 0xEB,
	HAND_GRIP_COUNT		= 7,
};

enum ATTACK_ANIMATION {
	ATTACK_ANIMATION_DEFAULT		= 255,
	ATTACK_ANIMATION_ATTACK_3		= 38,
	ATTACK_ANIMATION_ATTACK_4		= 44,
	ATTACK_ANIMATION_ATTACK_5		= 50,
	ATTACK_ANIMATION_ATTACK_6		= 56,
	ATTACK_ANIMATION_ATTACK_7		= 62,
	ATTACK_ANIMATION_ATTACK_8		= 68,
	ATTACK_ANIMATION_ATTACK_9		= 144,
	ATTACK_ANIMATION_ATTACK_LEFT	= 26,
	ATTACK_ANIMATION_ATTACK_LOOP	= 74,
	ATTACK_ANIMATION_ATTACK_RIGHT	= 32,
	ATTACK_ANIMATION_ATTACK_SPIN	= 80,
	ATTACK_ANIMATION_ATTACK_SPIN_2	= 86,
	ATTACK_ANIMATION_ATTACK_THROW	= 114,
	ATTACK_ANIMATION_ATTACK_THROW_2 = 120,
	ATTACK_ANIMATION_ATTACK_THROW_3 = 126,
	ATTACK_ANIMATION_ATTACK_THROW_4 = 132,
	ATTACK_ANIMATION_ATTACK_THROW_5 = 138,
	ATTACK_ANIMATION_ATTACK_THROW_6 = 150,
	ATTACK_ANIMATION_ATTACK_THROW_7 = 156,
	ATTACK_ANIMATION_ATTACK_THROW_8 = 162,
	ATTACK_ANIMATION_PLACE_MINE		= 102,
	ATTACK_ANIMATION_PLACE_MINE_2	= 108,
	ATTACK_ANIMATION_COUNT			= 23,
};

enum RELOAD_ANIM {
	RELOAD_ANIM_A = 0,
	RELOAD_ANIM_B,
	RELOAD_ANIM_C,
	RELOAD_ANIM_D,
	RELOAD_ANIM_E,
	RELOAD_ANIM_F,
	RELOAD_ANIM_G,
	RELOAD_ANIM_H,
	RELOAD_ANIM_I,
	RELOAD_ANIM_J,
	RELOAD_ANIM_K,
	RELOAD_ANIM_L,
	RELOAD_ANIM_M,
	RELOAD_ANIM_N,
	RELOAD_ANIM_O,
	RELOAD_ANIM_P,
	RELOAD_ANIM_Q,
	RELOAD_ANIM_R,
	RELOAD_ANIM_S,
	RELOAD_ANIM_W,
	RELOAD_ANIM_X,
	RELOAD_ANIM_Y,
	RELOAD_ANIM_Z,
	RELOAD_ANIM_COUNT,
};
static_assert(RELOAD_ANIM_COUNT == 23);

enum WEAPON_RUMBLE_PATTERN {
	WEAPON_RUMBLE_PATTERN_CONSTANT = 0,
	WEAPON_RUMBLE_PATTERN_SQUARE,
	WEAPON_RUMBLE_PATTERN_TRIANGLE,
	WEAPON_RUMBLE_PATTERN_SAWTOOTH
};

#pragma endregion

#pragma region Combat

enum COMBAT_WORLD_STATE : uint32_t {
	COMBAT_WORLD_STATE_TARGET_DEAD					= 0,
	COMBAT_WORLD_STATE_AT_LOCATION					= 1, // -> COMBAT_LOCATION_TYPE
	COMBAT_WORLD_STATE_NOT_AT_LOCATION				= 2, // -> COMBAT_LOCATION_TYPE
	COMBAT_WORLD_STATE_TARGET_LOST					= 3,
	COMBAT_WORLD_STATE_TARGET_DETECTED				= 4,
	COMBAT_WORLD_STATE_TARGET_360_LOS				= 5,
	COMBAT_WORLD_STATE_TARGET_BLOCKED				= 6,
	COMBAT_WORLD_STATE_TARGET_SPACE_DIFFERENT		= 7,
	COMBAT_WORLD_STATE_EXPLOSIVE_PROJECTILE_BLOCKED = 8,
	COMBAT_WORLD_STATE_TARGET_FLUSHED				= 9,
	COMBAT_WORLD_STATE_WEAPON_DRAWN					= 10, // -> COMBAT_WEAPON_TYPE
	COMBAT_WORLD_STATE_WEAPON_TYPE_EQUIPPED			= 11, // -> COMBAT_WEAPON_TYPE
	COMBAT_WORLD_STATE_HAS_WEAPON_TYPE				= 12, // -> COMBAT_WEAPON_TYPE
	COMBAT_WORLD_STATE_HAS_COMBAT_ITEM				= 13, // -> COMBAT_LOCATION_TYPE
	COMBAT_WORLD_STATE_THREATENED					= 14,
	COMBAT_WORLD_STATE_WANTS_TO_FLEE				= 15,
	COMBAT_WORLD_STATE_USED_COMBAT_ITEM				= 16,
	COMBAT_WORLD_STATE_HIDING						= 17,
	COMBAT_WORLD_STATE_EXECUTION_FLAGS				= 18, // -> COMBAT_PERMISSIONS
	COMBAT_WORLD_STATE_GROUP_STRATEGY_ASSIGNMENT	= 19,
	COMBAT_WORLD_STATE_COUNT,
};

enum COMBAT_LOCATION_TYPE : uint32_t {
	TARGET_LOCATION				= 0,
	NEAR_TARGET_LOCATION		= 1,
	COVER_LOCATION				= 2,
	DODGE_LOCATION				= 3,
	FLANK_LOCATION				= 4,
	FALLBACK_LOCATION			= 5,
	ADVANCE_LOCATION			= 6,
	DESTINATION_LOCATION		= 7,
	GUARD_LOCATION				= 8,
	CLUSTER_LOCATION			= 9,
	HIDE_LOCATION				= 10,
	GRENADE_LOCATION			= 11,
	FLEE_LOCATION				= 12,
	LOS_LOCATION				= 13,
	SAFE_LOCATION				= 14,
	INVESTIGATE_LOCATION		= 15,
	COMBAT_AREA_LOCATION		= 16,
	COMBAT_ITEM_RESTORE			= 17,
	COMBAT_ITEM_BUFF			= 18,
	COMBAT_ITEM_TARGET_OBJECT	= 19,
	COMBAT_ITEM_AMMO			= 20,
	COMBAT_ITEM_WEAPON			= 21,

	COMBAT_LOCATION_COUNT		= 22,

	ACTIVATE_COMBAT_ITEM		= 22,
	USE_COMBAT_ITEM				= 23,
	EQUIPPED_WEAPON_TYPE		= 24,
};

enum COMBAT_ITEM_TYPE {
	COMBAT_ITEM_TYPE_RESTORE	= 0,
	COMBAT_ITEM_TYPE_BUFF		= 1,
	COMBAT_ITEM_TYPE_COUNT,
};

enum LOCATION_TARGET_TYPE : uint8_t {
	LOCATION_TARGET_TYPE_DESTINATION,
	LOCATION_TARGET_TYPE_GUARD,
	LOCATION_TARGET_TYPE_CLUSTER,
	LOCATION_TARGET_TYPE_COMBAT_AREA,
};

enum COMBAT_ACTION_TYPE {
	COMBAT_ACTION_ATTACK_RANGED_EXPLOSIVE,
	COMBAT_ACTION_ATTACK_RANGED_EXPLOSIVE_COVER,
	COMBAT_ACTION_ATTACK_RANGED,
	COMBAT_ACTION_ATTACK_RANGED_COVER,
	COMBAT_ACTION_ATTACK_GRENADE,
	COMBAT_ACTION_ATTACK_GRENADE_FLUSH_TARGET,
	COMBAT_ACTION_ATTACK_GRENADE_COVER,
	COMBAT_ACTION_ATTACK_MELEE,
	COMBAT_ACTION_ATTACK_HAND_TO_HAND,
	COMBAT_ACTION_MOVE,
	COMBAT_ACTION_MOVE_SWITCH_TO_MELEE,
	COMBAT_ACTION_MOVE_ATTACK_RANGED,
	COMBAT_ACTION_MOVE_ATTACK_EXPLOSIVE,
	COMBAT_ACTION_MOVE_ATTACK_GRENADE,
	COMBAT_ACTION_DRAW_WEAPON,
	COMBAT_ACTION_SWITCH_WEAPON,
	COMBAT_ACTION_AVOID_THREAT,
	COMBAT_ACTION_SEARCH,
	COMBAT_ACTION_INVESTIGATE,
	COMBAT_ACTION_DODGE,
	COMBAT_ACTION_IGNORE_BLOCKED_TARGET,
	COMBAT_ACTION_FLEE,
	COMBAT_ACTION_ACTIVATE_COMBAT_ITEM,
	COMBAT_ACTION_USE_COMBAT_ITEM,
	COMBAT_ACTION_ACQUIRE_LOS,
	COMBAT_ACTION_HIDE,
	COMBAT_ACTION_APPROACH_TARGET,
};

enum COMBAT_GROUP_STRATEGY {
	COMBAT_GROUP_STRATEGY_FALLBACK	= 0,
	COMBAT_GROUP_STRATEGY_ADVANCE	= 1,
	COMBAT_GROUP_STRATEGY_FLANK		= 2,
	COMBAT_GROUP_STRATEGY_AMBUSH	= 3,
	COMBAT_GROUP_STRATEGY_COUNT		= 4,
};

#pragma endregion

enum DIALOGUE_TYPE {
	DT_TOPIC			= 0,
	DT_CONVERSATION		= 1,
	DT_COMBAT			= 2,
	DT_PERSUASION		= 3,
	DT_DETECTION		= 4,
	DT_SERVICE			= 5,
	DT_MISCELLANEOUS	= 6,
	DT_RADIO			= 7,
	DIALOGUE_TYPE_COUNT,
};

enum FACTION_RELATION : uint32_t {
	FACTION_RELATION_ENEMY		= 0,
	FACTION_RELATION_NEUTRAL	= 1,
	FACTION_RELATION_ALLY		= 2,
	FACTION_RELATION_FRIEND		= 3,
};